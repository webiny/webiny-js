import webpack from "webpack";
import WebpackDevServer from "webpack-dev-server";
// @ts-ignore
import { choosePort, createCompiler } from "./config/WebpackDevServerUtils";
import { prepareUrls } from "./config/prepareUrls";
// @ts-ignore
import chalk from "react-dev-utils/chalk";
// @ts-ignore
import clearConsole from "react-dev-utils/clearConsole";
// @ts-ignore
import checkRequiredFiles from "react-dev-utils/checkRequiredFiles";
// @ts-ignore
import openBrowserTab from "react-dev-utils/openBrowser";
// We require that you explicitly set browsers and do not fall back to browsers list defaults.
// @ts-ignore
import { checkBrowsers } from "react-dev-utils/browsersHelper";
import getPaths from "./config/paths";
import { BabelConfigModifier, WebpackConfigModifier } from "./config/webpack.config";

export interface WatchOptions {
    cwd: string;
    entry: string;
    html: string;
    babelConfigModifier: BabelConfigModifier;
    webpackConfigModifier: WebpackConfigModifier;
    openBrowser?: boolean;
}

export const createWatchConfig = async (options: WatchOptions) => {
    if (typeof options.openBrowser === "undefined") {
        options.openBrowser = false; // TODO: flip back to `true`
    }

    // Makes the script crash on unhandled rejections instead of silently
    // ignoring them. In the future, promise rejections that are not handled will
    // terminate the Node.js process with a non-zero exit code.
    process.on("unhandledRejection", err => {
        throw err;
    });

    const paths = getPaths({ appIndexJs: options.entry, cwd: options.cwd });
    const { createWebpackConfig } = await import("./config/webpack.config");
    const { createDevServerConfig } = await import("./config/webpackDevServer.config");

    const isInteractive = process.stdout.isTTY;

    // Warn and crash if required files are missing
    if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
        process.exit(1);
    }

    let buildConfig = createWebpackConfig("development", {
        paths,
        babelConfigModifier: options.babelConfigModifier
    });

    buildConfig = options.webpackConfigModifier(buildConfig);

    try {
        await checkBrowsers(paths.appPath, isInteractive);

        const host = getHost();
        const port = await getPort(host);
        const https = process.env.HTTPS === "true";
        const protocol = https ? "https" : "http";
        const appName = require(paths.appPackageJson).name;
        const urls = prepareUrls(protocol, host, port);

        // Create a webpack compiler that is configured with custom messages.
        const compiler = createCompiler({
            appName,
            config: buildConfig,
            urls,
            webpack
        });

        // Serve webpack assets generated by the compiler over a web server.
        const serverConfig = createDevServerConfig({
            host,
            port,
            https,
            allowedHost: urls.lanUrlForConfig,
            paths
        });
        const devServer = new WebpackDevServer(serverConfig, compiler);

        // Launch WebpackDevServer.
        await devServer.start();

        if (isInteractive) {
            clearConsole();
        }

        console.log(chalk.cyan("Starting the development server...\n"));

        if (options.openBrowser) {
            // Powershell sets `SystemRoot`, but the `open` library is looking for `SYSTEMROOT`
            // so we need to make it happy by setting the right ENV variable.
            if (process.platform === "win32" && typeof process.env.SystemRoot !== "undefined") {
                process.env.SYSTEMROOT = process.env.SystemRoot;
            }
            openBrowserTab(urls.localUrlForBrowser);
        }

        ["SIGINT", "SIGTERM"].forEach(sig => {
            // @ts-ignore
            process.on(sig, async () => {
                await devServer.stop();
                process.exit();
            });
        });
    } catch (err) {
        if (err && err.message) {
            console.error(err);
        }
        process.exit(1);
    }
};

function getHost() {
    const host = process.env.HOST || "0.0.0.0";

    if (process.env.HOST) {
        console.log(
            chalk.cyan(
                `Attempting to bind to HOST environment variable: ${chalk.yellow(
                    chalk.bold(process.env.HOST)
                )}`
            )
        );
        console.log(
            `If this was unintentional, check that you haven't mistakenly set it in your shell.`
        );
        console.log(`Learn more here: ${chalk.yellow("https://bit.ly/CRA-advanced-config")}`);
        console.log();
    }

    return host;
}

async function getPort(host: string) {
    const defaultPort = parseInt(process.env.PORT || "3000", 10);

    const port = await choosePort(host, defaultPort);
    if (port == null) {
        // We have not found a port.
        throw new Error(`No free port was found. Default port is ${defaultPort}`);
    }

    return port;
}
