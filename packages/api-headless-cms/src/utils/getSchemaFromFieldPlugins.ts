import { CmsModel, CmsFieldTypePlugins, ApiEndpoint } from "~/types";
import { CmsGraphQLSchemaPlugin } from "~/plugins";

const TYPE_MAP: Record<string, "manage" | "read"> = {
    preview: "read",
    read: "read",
    manage: "manage"
};

interface Params {
    models: CmsModel[];
    fieldTypePlugins: CmsFieldTypePlugins;
    type: ApiEndpoint;
}
export const createGraphQLSchemaPluginFromFieldPlugins = (params: Params) => {
    const { models, fieldTypePlugins, type } = params;

    const plugins: CmsGraphQLSchemaPlugin[] = [];
    for (const key in fieldTypePlugins) {
        const fieldTypePlugin = fieldTypePlugins[key];
        if (!TYPE_MAP[type] || !fieldTypePlugin[TYPE_MAP[type]]) {
            continue;
        }
        const createSchema = fieldTypePlugin[TYPE_MAP[type]].createSchema;
        // Render gql types generated by field type plugins
        if (!createSchema) {
            continue;
        }
        const schema = createSchema({ models });

        const plugin = new CmsGraphQLSchemaPlugin(schema);
        plugin.name = `headless-cms.graphql.schema.${type}.field.${fieldTypePlugin.fieldType}`;
        plugins.push(plugin);
    }
    return plugins;
};
