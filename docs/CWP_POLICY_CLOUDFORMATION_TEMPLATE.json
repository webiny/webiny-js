{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create an IAM group with required permissions for a Webiny project and add it to a given IAM user.",
  "Parameters": {
    "Username": {
      "Type": "String",
      "Description": "Name of an existing IAM user to be added to the group.",
      "AllowedPattern": ".+"
    }
  },
  "Resources": {
    "CwpGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "CreateWebinyProjectAccessGroup",
        "Policies": [
          {
            "PolicyName": "CreateWebinyProjectAccessPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PermissionForCloudfront",
                  "Effect": "Allow",
                  "Action": [
                    "cloudfront:CreateDistribution",
                    "cloudfront:CreateDistributionWithTags",
                    "cloudfront:DeleteDistribution",
                    "cloudfront:GetDistribution",
                    "cloudfront:ListTagsForResource",
                    "cloudfront:TagResource",
                    "cloudfront:UntagResource",
                    "cloudfront:UpdateDistribution"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForApiGateway",
                  "Effect": "Allow",
                  "Action": ["apigateway:*"],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForCognitoIdp",
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:CreateUserPool",
                    "cognito-idp:CreateUserPoolClient",
                    "cognito-idp:DeleteUserPool",
                    "cognito-idp:DeleteUserPoolClient",
                    "cognito-idp:DescribeUserPool",
                    "cognito-idp:DescribeUserPoolClient",
                    "cognito-idp:GetUserPoolMfaConfig",
                    "cognito-idp:TagResource",
                    "cognito-idp:UntagResource"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForDynamodb",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:CreateTable",
                    "dynamodb:DeleteTable",
                    "dynamodb:DescribeContinuousBackups",
                    "dynamodb:DescribeTable",
                    "dynamodb:DescribeTimeToLive",
                    "dynamodb:ListTagsOfResource",
                    "dynamodb:TagResource",
                    "dynamodb:UntagResource"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForElasticsearch",
                  "Effect": "Allow",
                  "Action": [
                    "es:AddTags",
                    "es:CreateElasticsearchDomain",
                    "es:DeleteElasticsearchDomain",
                    "es:DescribeElasticsearchDomain",
                    "es:GetCompatibleElasticsearchVersions",
                    "es:ListTags",
                    "es:RemoveTags",
                    "es:UpdateElasticsearchDomainConfig"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForEventBridge",
                  "Effect": "Allow",
                  "Action": [
                    "events:DeleteRule",
                    "events:DescribeRule",
                    "events:ListTagsForResource",
                    "events:ListTargetsByRule",
                    "events:PutRule",
                    "events:PutTargets",
                    "events:RemoveTargets",
                    "events:TagResource",
                    "events:UntagResource"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForIAM",
                  "Effect": "Allow",
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreatePolicy",
                    "iam:CreatePolicyVersion",
                    "iam:CreateRole",
                    "iam:DeleteRole",
                    "iam:DeleteRolePolicy",
                    "iam:DetachRolePolicy",
                    "iam:DeletePolicy",
                    "iam:DeletePolicyVersion",
                    "iam:GetPolicy",
                    "iam:GetPolicyVersion",
                    "iam:GetRole",
                    "iam:GetUser",
                    "iam:ListAttachedRolePolicies",
                    "iam:ListInstanceProfilesForRole",
                    "iam:ListRolePolicies",
                    "iam:ListPolicyVersions",
                    "iam:ListRoles",
                    "iam:PassRole",
                    "iam:PutRolePolicy",
                    "iam:TagRole",
                    "iam:UntagRole"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForApiKms",
                  "Effect": "Allow",
                  "Action": [
                    "kms:CreateGrant",
                    "kms:Decrypt",
                    "kms:DescribeKey",
                    "kms:Encrypt",
                    "kms:GenerateDataKey",
                    "kms:GenerateDataKeyPair",
                    "kms:GenerateDataKeyPairWithoutPlaintext",
                    "kms:GenerateDataKeyWithoutPlaintext",
                    "kms:ListAliases",
                    "kms:ListKeys",
                    "kms:ReEncryptFrom",
                    "kms:ReEncryptTo",
                    "kms:TagResource",
                    "kms:UntagResource"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForLambda",
                  "Effect": "Allow",
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:CreateEventSourceMapping",
                    "lambda:CreateFunction",
                    "lambda:DeleteEventSourceMapping",
                    "lambda:DeleteFunction",
                    "lambda:GetAccountSettings",
                    "lambda:GetAlias",
                    "lambda:GetEventSourceMapping",
                    "lambda:GetFunction",
                    "lambda:GetFunctionCodeSigningConfig",
                    "lambda:GetFunctionConfiguration",
                    "lambda:GetLayerVersion",
                    "lambda:GetLayerVersionPolicy",
                    "lambda:GetPolicy",
                    "lambda:InvokeAsync",
                    "lambda:InvokeFunction",
                    "lambda:ListAliases",
                    "lambda:ListEventSourceMappings",
                    "lambda:ListFunctions",
                    "lambda:ListTags",
                    "lambda:ListVersionsByFunction",
                    "lambda:RemovePermission",
                    "lambda:TagResource",
                    "lambda:UntagResource",
                    "lambda:UpdateEventSourceMapping",
                    "lambda:UpdateFunctionCode",
                    "lambda:UpdateFunctionConfiguration"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForApiS3",
                  "Effect": "Allow",
                  "Action": ["s3:*"],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForApiSts",
                  "Effect": "Allow",
                  "Action": ["sts:GetCallerIdentity"],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForApiTag",
                  "Effect": "Allow",
                  "Action": ["tag:TagResources", "tag:UntagResources"],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForEC2",
                  "Effect": "Allow",
                  "Action": ["ec2:*"],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForLogs",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CancelExportTask",
                    "logs:CreateLogDelivery",
                    "logs:DeleteDestination",
                    "logs:DeleteLogDelivery",
                    "logs:DeleteQueryDefinition",
                    "logs:DeleteResourcePolicy",
                    "logs:DescribeDestinations",
                    "logs:DescribeExportTasks",
                    "logs:DescribeQueries",
                    "logs:DescribeQueryDefinitions",
                    "logs:DescribeResourcePolicies",
                    "logs:GetLogDelivery",
                    "logs:GetLogRecord",
                    "logs:GetQueryResults",
                    "logs:ListLogDeliveries",
                    "logs:PutDestination",
                    "logs:PutDestinationPolicy",
                    "logs:PutQueryDefinition",
                    "logs:PutResourcePolicy",
                    "logs:StopQuery",
                    "logs:TestMetricFilter",
                    "logs:UpdateLogDelivery"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "PermissionForPassRole",
                  "Effect": "Allow",
                  "Action": ["iam:PassRole"],
                  "Resource": [
                    "arn:aws:iam::*:role/fm-lambda-role-*",
                    "arn:aws:iam::*:role/pre-rendering-service-lambda-role*",
                    "arn:aws:iam::*:role/dynamo-to-elastic-lambda-role-*",
                    "arn:aws:iam::*:role/headless-cms-lambda-role-*",
                    "arn:aws:iam::*:role/pb-update-settings-lambda-role-*",
                    "arn:aws:iam::*:role/api-lambda-role-*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CwpUserToGroup": {
      "Type": "AWS::IAM::UserToGroupAddition",
      "Properties": {
        "GroupName": {
          "Ref": "CwpGroup"
        },
        "Users": [
          {
            "Ref": "Username"
          }
        ]
      }
    }
  }
}
