name: Stable Branch - Push

on:
  push:
    branches: [stable]

env:
  NODE_OPTIONS: --max_old_space_size=4096
  AWS_REGION: eu-central-1
  BUILD_OVERRIDES: '{"tsConfig":{"compilerOptions":{"skipLibCheck":true}}}'

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    outputs:
      jest-packages: ${{ steps.list-jest-packages.outputs.jest-packages }}
      ts: ${{ steps.get-timestamp.outputs.ts }}
      webiny-version: ${{ steps.get-webiny-version.outputs.webiny-version }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - name: Get current version of Webiny
        id: get-webiny-version
        run: echo "webiny-version=$(node --eval "console.log(require('./lerna.json').version)")" >> $GITHUB_OUTPUT

      - name: Get timestamp
        id: get-timestamp
        # run: echo "ts=$(node --eval "console.log(new Date().getTime())")" >> $GITHUB_OUTPUT
        run: echo "ts=$(node --eval "console.log(new Date().getTime())")" >> $GITHUB_OUTPUT

      - name: List packages with Jest tests
        id: list-jest-packages
        # run: echo "jest-packages=$(node scripts/listPackagesWithTests.js)" >> $GITHUB_OUTPUT
        run: echo "jest-packages=$(node scripts/listPackagesWithTests.js)" >> $GITHUB_OUTPUT

  build:
    needs: init
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v3
        id: cached-packages
        with:
          path: .webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.init.outputs.webiny-version }}-${{ secrets.RANDOM_CACHE_KEY_SUFFIX }}

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true' || steps.cached-packages.outputs.cache-hit != 'true'
        run: yarn --immutable

      - name: Build packages
        if: steps.cached-packages.outputs.cache-hit != 'true'
        run: node scripts/buildWithCache.js --build-overrides='${{ env.BUILD_OVERRIDES }}'

      - uses: actions/cache@v3
        id: packages-cache
        with:
          path: .webiny/cached-packages
          key: packages-cache-${{ needs.init.outputs.ts }}

  code-analysis:
    needs: [init, build]
    name: Static code analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v3
        with:
          path: .webiny/cached-packages
          key: packages-cache-${{ needs.init.outputs.ts }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Check code formatting
        run: yarn prettier:check

      - name: Check dependencies
        run: yarn adio

      - name: Check TS configs
        run: yarn check-ts-configs

      - name: ESLint
        run: yarn eslint

  code-analysis-typescript:
    name: Static code analysis (TypeScript)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Build packages (full)
        run: node scripts/buildWithCache.js

  jest-tests:
    needs: [init, build]
    name: ${{ matrix.package }} (${{ matrix.os }}, Node v${{ matrix.node }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [14]
        package: ${{ fromJson(needs.init.outputs.jest-packages) }}
    runs-on: ${{ matrix.os }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_ELASTIC_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.ELASTIC_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ needs.init.outputs.ts }}_
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --immutable

      - uses: actions/cache@v3
        with:
          path: .webiny/cached-packages
          key: packages-cache-${{ needs.init.outputs.ts }}

      - name: Build packages
        run: node scripts/buildWithCache.js --build-overrides='${{ env.BUILD_OVERRIDES }}'

      - name: Run tests
        run: yarn test ${{ matrix.package }}

  e2e-wby-cms-ddb-init:
    name: E2E (DDB) - Init
    runs-on: ubuntu-latest
    outputs:
      cypress-folders: ${{ steps.list-cypress-folders.outputs.cypress-folders }}
      ts: ${{ steps.get-timestamp.outputs.ts }}
      webiny-version: ${{ steps.get-webiny-version.outputs.webiny-version }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - name: Get current version of Webiny
        id: get-webiny-version
        run: echo "webiny-version=$(node --eval "console.log(require('./lerna.json').version)")" >> $GITHUB_OUTPUT

      - name: Get timestamp
        id: get-timestamp
        run: echo "ts=$(node --eval "console.log(new Date().getTime())")" >> $GITHUB_OUTPUT

      - name: List Cypress tests folders
        id: list-cypress-folders
        run: echo "cypress-folders=$(node scripts/listCypressTestsFolders.js)" >> $GITHUB_OUTPUT

  e2e-wby-cms-ddb-project-setup:
    name: E2E (DDB) - Project setup
    needs: e2e-wby-cms-ddb-init
    runs-on: ubuntu-latest
    outputs:
      cypress-config: ${{ steps.save-cypress-config.outputs.cypress-config }}
    environment: next
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOY_WEBINY_PROJECT_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_WEBINY_PROJECT_AWS_SECRET_ACCESS_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      CYPRESS_DEPLOYSENTINEL_KEY: ${{ secrets.CYPRESS_DEPLOYSENTINEL_KEY }}
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      WEBINY_PULUMI_BACKEND: ${{ secrets.WEBINY_PULUMI_BACKEND }}_${{ needs.e2e-wby-cms-ddb-init.outputs.ts }}
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3
        with:
          # We want to make sure all commits are present and that the next release version is calculated correctly.
          fetch-depth: 0
          path: v5
          # Uncomment this only if testing the workflow (running it on PR submit).
          # Fixes Lerna's detached HEAD issue (https://github.com/lerna/lerna/issues/2443).
          # ref: ${{ github.event.pull_request.head.ref }}

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: v5/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('v5/**/yarn.lock') }}

      - uses: actions/cache@v3
        id: cached-packages
        with:
          path: v5/.webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.e2e-wby-cms-ddb-init.outputs.webiny-version }}-${{ secrets.RANDOM_CACHE_KEY_SUFFIX }}

      - name: Install dependencies
        working-directory: v5
        run: yarn --immutable

      - name: Build packages
        working-directory: v5
        run: node scripts/buildWithCache.js --build-overrides='${{ env.BUILD_OVERRIDES }}'

      # Publish built packages to Verdaccio.
      - name: Start Verdaccio local server
        working-directory: v5
        run: npx pm2 start verdaccio -- -c .verdaccio.yaml

      - name: Create ".npmrc" file in the project root, with a dummy auth token
        working-directory: v5
        run: echo '//localhost:4873/:_authToken="dummy-auth-token"' > .npmrc

      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873

      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"

      - name: Set git username
        run: git config --global user.name "webiny-bot"

      - name: Version and publish to Verdaccio
        working-directory: v5
        run: yarn release --type=verdaccio

      - name: Create verdaccio-files artifact
        uses: actions/upload-artifact@v3
        with:
          name: verdaccio-files
          retention-days: 1
          path: |
            v5/.verdaccio/
            v5/.verdaccio.yaml

        # Create a new Webiny project, deploy it, and complete the installation wizard.
      - name: Disable Webiny telemetry
        run: >
          mkdir ~/.webiny &&
          echo '{ "id": "ci", "telemetry": false }' > ~/.webiny/config

      - name: Create directory
        run: mkdir xyz

      - name: Create a new Webiny project
        working-directory: xyz
        run: >
          npx create-webiny-project@local-npm test-project
          --tag local-npm --no-interactive
          --assign-to-yarnrc '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
          --template-options '{"region":"${{ env.AWS_REGION }}","storageOperations":"ddb"}'

      - name: Print CLI version
        working-directory: xyz/test-project
        run: yarn webiny --version

      - name: Create project-files artifact
        uses: actions/upload-artifact@v3
        with:
          name: project-files
          retention-days: 1
          path: |
            xyz/test-project/
            !xyz/test-project/node_modules/**/*
            !xyz/test-project/**/node_modules/**/*
            !xyz/test-project/.yarn/cache/**/*

      - name: Deploy Core
        working-directory: xyz/test-project
        run: yarn webiny deploy apps/core --env dev

      - name: Deploy API
        working-directory: xyz/test-project
        run: yarn webiny deploy apps/api --env dev

      - name: Deploy Admin Area
        working-directory: xyz/test-project
        run: yarn webiny deploy apps/admin --env dev

      - name: Deploy Website
        working-directory: xyz/test-project
        run: yarn webiny deploy apps/website --env dev

      # Generates a new cypress.json config.
      - name: Create Cypress config
        working-directory: v5
        run: yarn setup-cypress --projectFolder ../xyz/test-project

      # We also want to store the generated Cypress config as a job output.
      # This way we don't have to generate it again (which may take ~30s).
      - name: Save Cypress config
        id: save-cypress-config
        working-directory: v5
        run: echo "cypress-config=$(cat cypress.json | tr -d ' \t\n\r')" >> $GITHUB_OUTPUT

      - name: Cypress - run installation wizard test
        working-directory: v5
        run: yarn cypress run --browser chrome --spec "cypress/integration/adminInstallation/**/*.spec.js"

      - name: Upload screenshots to Slack
        uses: trymbill/cypress-slack-video-upload-action@v1.3.0
        if: failure()
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channels: C027VQG8080
          workdir: v5/cypress
          message-text: Could not complete Admin Area installation wizard. Screenshots have been placed in this thread, good luck.

  e2e-wby-cms-ddb-cypress-tests:
    name: ${{ matrix.cypress-folder }} (${{ matrix.os }}, Node v${{ matrix.node }})
    needs: [e2e-wby-cms-ddb-init, e2e-wby-cms-ddb-project-setup]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [14]
        cypress-folder: ${{ fromJson(needs.e2e-wby-cms-ddb-init.outputs.cypress-folders) }}
    runs-on: ubuntu-latest
    environment: next
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      CYPRESS_DEPLOYSENTINEL_KEY: ${{ secrets.CYPRESS_DEPLOYSENTINEL_KEY }}
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      WEBINY_PULUMI_BACKEND: ${{ secrets.WEBINY_PULUMI_BACKEND }}_${{ needs.e2e-wby-cms-ddb-init.outputs.ts }}
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    steps:
      - uses: actions/checkout@v3
        with:
          path: v5

      - uses: actions/cache@v3
        with:
          path: v5/.webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.e2e-wby-cms-ddb-init.outputs.webiny-version }}-${{ secrets.RANDOM_CACHE_KEY_SUFFIX }}

      - uses: actions/cache@v3
        with:
          path: v5/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('v5/**/yarn.lock') }}

      - name: Install dependencies
        working-directory: v5
        run: yarn --immutable

      - name: Build packages
        working-directory: v5
        run: node scripts/buildWithCache.js --build-overrides='${{ env.BUILD_OVERRIDES }}'

      - name: Set up Cypress config
        working-directory: v5
        run: echo '${{ needs.e2e-wby-cms-ddb-project-setup.outputs.cypress-config }}' > cypress.json

      - name: Cypress - run "${{ matrix.cypress-folder }}" tests
        working-directory: v5
        run: yarn cypress run --browser chrome --spec "${{ matrix.cypress-folder }}"

      - name: Upload screenshots to Slack
        uses: trymbill/cypress-slack-video-upload-action@v1.3.0
        if: failure()
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channels: C027VQG8080
          workdir: v5/cypress
          message-text: Cypress tests failed! Screenshots have been placed in this thread, good luck.

  e2e-wby-cms-ddb-es-init:
    name: E2E (DDB+ES) - Init
    runs-on: ubuntu-latest
    outputs:
      cypress-folders: ${{ steps.list-cypress-folders.outputs.cypress-folders }}
      ts: ${{ steps.get-timestamp.outputs.ts }}
      webiny-version: ${{ steps.get-webiny-version.outputs.webiny-version }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - name: Get current version of Webiny
        id: get-webiny-version
        run: echo "webiny-version=$(node --eval "console.log(require('./lerna.json').version)")" >> $GITHUB_OUTPUT

      - name: Get timestamp
        id: get-timestamp
        run: echo "ts=$(node --eval "console.log(new Date().getTime())")" >> $GITHUB_OUTPUT

      - name: List Cypress tests folders
        id: list-cypress-folders
        run: echo "cypress-folders=$(node scripts/listCypressTestsFolders.js)" >> $GITHUB_OUTPUT

  e2e-wby-cms-ddb-es-project-setup:
    name: E2E (DDB+ES) - Project setup
    needs: e2e-wby-cms-ddb-es-init
    runs-on: ubuntu-latest
    outputs:
      cypress-config: ${{ steps.save-cypress-config.outputs.cypress-config }}
    environment: next
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOY_WEBINY_PROJECT_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_WEBINY_PROJECT_AWS_SECRET_ACCESS_KEY }}
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_ELASTIC_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ needs.e2e-wby-cms-ddb-es-init.outputs.ts }}_
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.ELASTIC_SEARCH_ENDPOINT }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      CYPRESS_DEPLOYSENTINEL_KEY: ${{ secrets.CYPRESS_DEPLOYSENTINEL_KEY }}
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      WEBINY_PULUMI_BACKEND: ${{ secrets.WEBINY_PULUMI_BACKEND }}_${{ needs.e2e-wby-cms-ddb-es-init.outputs.ts }}
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3
        with:
          # We want to make sure all commits are present and that the next release version is calculated correctly.
          fetch-depth: 0
          path: v5
          # Uncomment this only if testing the workflow (running it on PR submit).
          # Fixes Lerna's detached HEAD issue (https://github.com/lerna/lerna/issues/2443).
          # ref: ${{ github.event.pull_request.head.ref }}

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: v5/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('v5/**/yarn.lock') }}

      - uses: actions/cache@v3
        id: cached-packages
        with:
          path: v5/.webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.e2e-wby-cms-ddb-es-init.outputs.webiny-version }}-${{ secrets.RANDOM_CACHE_KEY_SUFFIX }}

      - name: Install dependencies
        working-directory: v5
        run: yarn --immutable

      - name: Build packages
        working-directory: v5
        run: node scripts/buildWithCache.js --build-overrides='${{ env.BUILD_OVERRIDES }}'

      # Publish built packages to Verdaccio.
      - name: Start Verdaccio local server
        working-directory: v5
        run: npx pm2 start verdaccio -- -c .verdaccio.yaml

      - name: Create ".npmrc" file in the project root, with a dummy auth token
        working-directory: v5
        run: echo '//localhost:4873/:_authToken="dummy-auth-token"' > .npmrc

      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873

      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"

      - name: Set git username
        run: git config --global user.name "webiny-bot"

      - name: Version and publish to Verdaccio
        working-directory: v5
        run: yarn release --type=verdaccio

      - name: Create verdaccio-files artifact
        uses: actions/upload-artifact@v3
        with:
          name: verdaccio-files
          retention-days: 1
          path: |
            v5/.verdaccio/
            v5/.verdaccio.yaml

        # Create a new Webiny project, deploy it, and complete the installation wizard.
      - name: Disable Webiny telemetry
        run: >
          mkdir ~/.webiny &&
          echo '{ "id": "ci", "telemetry": false }' > ~/.webiny/config

      - name: Create directory
        run: mkdir xyz

      - name: Create a new Webiny project
        working-directory: xyz
        run: >
          npx create-webiny-project@local-npm test-project
          --tag local-npm --no-interactive
          --assign-to-yarnrc '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
          --template-options '{"region":"${{ env.AWS_REGION }}","storageOperations":"ddb-es"}'

      - name: Print CLI version
        working-directory: xyz/test-project
        run: yarn webiny --version

      - name: Create project-files artifact
        uses: actions/upload-artifact@v3
        with:
          name: project-files
          retention-days: 1
          path: |
            xyz/test-project/
            !xyz/test-project/node_modules/**/*
            !xyz/test-project/**/node_modules/**/*
            !xyz/test-project/.yarn/cache/**/*

      - name: Deploy Core
        working-directory: xyz/test-project
        run: yarn webiny deploy apps/core --env dev

      - name: Deploy API
        working-directory: xyz/test-project
        run: yarn webiny deploy apps/api --env dev

      - name: Deploy Admin Area
        working-directory: xyz/test-project
        run: yarn webiny deploy apps/admin --env dev

      - name: Deploy Website
        working-directory: xyz/test-project
        run: yarn webiny deploy apps/website --env dev

      # Generates a new cypress.json config.
      - name: Create Cypress config
        working-directory: v5
        run: yarn setup-cypress --projectFolder ../xyz/test-project

      # We also want to store the generated Cypress config as a job output.
      # This way we don't have to generate it again (which may take ~30s).
      - name: Save Cypress config
        id: save-cypress-config
        working-directory: v5
        run: echo "cypress-config=$(cat cypress.json | tr -d ' \t\n\r')" >> $GITHUB_OUTPUT

      - name: Cypress - run installation wizard test
        working-directory: v5
        run: yarn cypress run --browser chrome --spec "cypress/integration/adminInstallation/**/*.spec.js"

      - name: Upload screenshots to Slack
        uses: trymbill/cypress-slack-video-upload-action@v1.3.0
        if: failure()
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channels: C027VQG8080
          workdir: v5/cypress
          message-text: Could not complete Admin Area installation wizard. Screenshots have been placed in this thread, good luck.

  e2e-wby-cms-ddb-es-cypress-tests:
    name: ${{ matrix.cypress-folder }} (${{ matrix.os }}, Node v${{ matrix.node }})
    needs: [e2e-wby-cms-ddb-es-init, e2e-wby-cms-ddb-es-project-setup]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [14]
        cypress-folder: ${{ fromJson(needs.e2e-wby-cms-ddb-es-init.outputs.cypress-folders) }}
    runs-on: ubuntu-latest
    environment: next
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_ELASTIC_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ needs.e2e-wby-cms-ddb-es-init.outputs.ts }}_
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.ELASTIC_SEARCH_ENDPOINT }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      CYPRESS_DEPLOYSENTINEL_KEY: ${{ secrets.CYPRESS_DEPLOYSENTINEL_KEY }}
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      WEBINY_PULUMI_BACKEND: ${{ secrets.WEBINY_PULUMI_BACKEND }}_${{ needs.e2e-wby-cms-ddb-es-init.outputs.ts }}
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    steps:
      - uses: actions/checkout@v3
        with:
          path: v5

      - uses: actions/cache@v3
        with:
          path: v5/.webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.e2e-wby-cms-ddb-es-init.outputs.webiny-version }}-${{ secrets.RANDOM_CACHE_KEY_SUFFIX }}

      - uses: actions/cache@v3
        with:
          path: v5/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('v5/**/yarn.lock') }}

      - name: Install dependencies
        working-directory: v5
        run: yarn --immutable

      - name: Build packages
        working-directory: v5
        run: node scripts/buildWithCache.js --build-overrides='${{ env.BUILD_OVERRIDES }}'

      - name: Set up Cypress config
        working-directory: v5
        run: echo '${{ needs.e2e-wby-cms-ddb-es-project-setup.outputs.cypress-config }}' > cypress.json

      - name: Cypress - run "${{ matrix.cypress-folder }}" tests
        working-directory: v5
        run: yarn cypress run --browser chrome --spec "${{ matrix.cypress-folder }}"

      - name: Upload screenshots to Slack
        uses: trymbill/cypress-slack-video-upload-action@v1.3.0
        if: failure()
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channels: C027VQG8080
          workdir: v5/cypress
          message-text: Cypress tests failed! Screenshots have been placed in this thread, good luck.

  npm-release-beta:
    needs:
      [
        init,
        code-analysis,
        jest-tests,
        e2e-wby-cms-ddb-cypress-tests,
        e2e-wby-cms-ddb-es-cypress-tests
      ]
    name: NPM release ("beta" tag)
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v3
        with:
          path: .webiny/cached-packages
          key: packages-cache-${{ needs.init.outputs.ts }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Build packages
        run: yarn build

      - name: Create ".npmrc" file in the project root
        run: echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc

      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"

      - name: Set git username
        run: git config --global user.name "webiny-bot"

      - name: Version and publish to NPM
        run: yarn release --type=beta

  npm-release-latest:
    needs: npm-release-beta
    name: NPM release ("latest" tag)
    runs-on: ubuntu-latest
    environment: release
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Install dependencies
        run: yarn --immutable

      - name: Build packages
        run: yarn build

      - name: Create ".npmrc" file in the project root
        run: echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc

      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"

      - name: Set git username
        run: git config --global user.name "webiny-bot"

      - name: Version and Publish
        run: yarn release --type=latest
