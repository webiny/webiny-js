name: Release (latest)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [release-latest]

env:
  NODE_OPTIONS: --max_old_space_size=4096

jobs:
  cache-keys:
    name: Create cache keys
    runs-on: ubuntu-latest
    outputs:
      day: ${{ steps.create-cache-keys.outputs.day }}
      ts: ${{ steps.create-timestamp.outputs.ts }}
    steps:
      - name: Create cache key (day)
        id: create-cache-keys
        run: echo "::set-output name=day::$(node --eval "console.log(new Date().getDate() + new Date().getDate())")"

      - name: Create timestamp
        id: create-timestamp
        run: echo "::set-output name=ts::$(node --eval "console.log(new Date().getTime())")"

  cache-dependencies-packages:
    name: Cache dependencies and packages
    runs-on: ubuntu-latest
    needs: cache-keys
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.branch }}

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v2
        id: cached-packages
        with:
          path: .webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.cache-keys.outputs.ts }}

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true' || steps.cached-packages.outputs.cache-hit != 'true'
        run: yarn --immutable

      - name: Build packages
        if: steps.cached-packages.outputs.cache-hit != 'true'
        run: node scripts/buildWithCache.js

  code-analysis:
    needs: [cache-keys, cache-dependencies-packages]
    name: Static code analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.branch }}

      - uses: actions/cache@v2
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v2
        with:
          path: .webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.cache-keys.outputs.ts }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Check code formatting
        run: yarn prettier:check

      - name: Check dependencies
        run: yarn adio

      - name: Check TS configs
        run: yarn check-ts-configs

      - name: ESLint
        run: yarn eslint

  jest-tests:
    needs: [cache-keys, cache-dependencies-packages]
    name: Jest tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [12, 14]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.branch }}

      - uses: actions/cache@v2
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --immutable

      - uses: actions/cache@v2
        with:
          path: .webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.cache-keys.outputs.ts }}

      - name: Build packages
        run: node scripts/buildWithCache.js

      - name: Run tests
        run: yarn test

  verdaccio-publish:
    needs: [cache-keys, cache-dependencies-packages]
    name: Publish to Verdaccio
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.branch }}

      - uses: actions/cache@v2
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v2
        with:
          path: .webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.cache-keys.outputs.ts }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Build packages
        run: node scripts/buildWithCache.js

      - name: Start Verdaccio local server
        run: npx pm2 start verdaccio -- -c .verdaccio.yaml

      - name: Create ".npmrc" file in the project root, with a dummy auth token
        run: echo '//localhost:4873/:_authToken="dummy-auth-token"' > .npmrc

      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873

      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"

      - name: Set git username
        run: git config --global user.name "webiny-bot"

      - name: Version packages (no push, no changelog)
        run: yarn lerna:version:verdaccio

      - name: Release to Verdaccio
        run: yarn lerna:publish:verdaccio

      - name: Upload verdaccio files
        uses: actions/upload-artifact@v2
        with:
          name: verdaccio-files
          retention-days: 1
          path: |
            .verdaccio/
            .verdaccio.yaml

  test-create-webiny-project:
    needs: [verdaccio-publish]
    name: Test "create-webiny-project" (different operating systems)
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [12, 14]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - uses: actions/download-artifact@v2
        with:
          name: verdaccio-files
          path: verdaccio-files

      - name: Start Verdaccio local server
        working-directory: verdaccio-files
        run: yarn add pm2 verdaccio && npx pm2 start verdaccio -- -c .verdaccio.yaml

      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873

      - name: Set git email (needed for create-webiny-project)
        run: git config --global user.email "webiny-bot@webiny.com"

      - name: Set git username (needed for create-webiny-project)
        run: git config --global user.name "webiny-bot"

      - name: Disable Webiny telemetry
        run: >
          mkdir ~/.webiny &&
          echo '{ "id": "ci", "telemetry": false }' > ~/.webiny/config

      - name: Create a new Webiny project
        run: >
          npx create-webiny-project@next test-project
          --tag next --no-interactive
          --assign-to-yarnrc '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
          --template-options '{"region":"eu-central-1"}'

  #  e2e-tests:
  #    needs: [cache-keys, verdaccio-publish]
  #    name: End-to-end tests
  #    runs-on: ubuntu-latest
  #    environment: next
  #    env:
  #      NODE_OPTIONS: --max_old_space_size=4096
  #      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_ELASTIC_SEARCH_DOMAIN_NAME }}
  #      ELASTIC_SEARCH_INDEX_PREFIX: ${{ needs.cache-keys.outputs.ts }}_
  #      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
  #      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
  #      WEBINY_PULUMI_BACKEND: ${{ secrets.WEBINY_PULUMI_BACKEND }}_${{ needs.cache-keys.outputs.ts }}
  #    steps:
  #      # After the run is over, destroy deployed cloud infrastructure.
  #      # Must be immediately defined here.
  #      - uses: webiny/action-post-run@2.0.1
  #        with:
  #          working-directory: test-project
  #          run: yarn webiny destroy api --env dev
  #
  #      - uses: webiny/action-post-run@2.0.1
  #        with:
  #          working-directory: test-project
  #          run: yarn webiny destroy apps/admin --env dev
  #
  #      - uses: webiny/action-post-run@2.0.1
  #        with:
  #          working-directory: test-project
  #          run: yarn webiny destroy apps/website --env dev
  #
  #      - uses: actions/setup-node@v2
  #        with:
  #          node-version: 12
  #
  #      - uses: actions/download-artifact@v2
  #        with:
  #          name: verdaccio-files
  #          path: verdaccio-files
  #
  #      - name: Start Verdaccio local server
  #        working-directory: verdaccio-files
  #        run: yarn add pm2 verdaccio && npx pm2 start verdaccio -- -c .verdaccio.yaml
  #
  #      - name: Configure NPM to use local registry (for `npx create-webiny-project`)
  #        run: npm config set registry http://localhost:4873
  #
  #      - name: Set git email (needed for create-webiny-project)
  #        run: git config --global user.email "webiny-bot@webiny.com"
  #
  #      - name: Set git username (needed for create-webiny-project)
  #        run: git config --global user.name "webiny-bot"
  #
  #      - name: Disable Webiny telemetry
  #        run: >
  #          mkdir ~/.webiny &&
  #          echo '{ "id": "ci", "telemetry": false }' > ~/.webiny/config
  #
  #      - name: Create a new Webiny project
  #        run: >
  #          npx create-webiny-project@next test-project
  #          --tag next --no-interactive
  #          --assign-to-yarnrc '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
  #          --template-options '{"region":"eu-central-1"}'
  #
  #      - name: Print CLI version
  #        working-directory: test-project
  #        run: yarn webiny --version
  #
  #      - name: Reduce prerendering service's process-queue schedule
  #        working-directory: test-project
  #        run: sed -i 's/5 minutes/1 minute/g' api/pulumi/dev/prerenderingService.ts
  #
  #      - name: Deploy API
  #        working-directory: test-project
  #        run: yarn webiny deploy api --env dev --debug
  #
  #      - name: Concurrently deploy Admin Area and Website
  #        working-directory: test-project
  #        run: npx concurrently "yarn webiny deploy apps/admin --env dev --debug" "yarn webiny deploy apps/website --env dev --debug"
  #
  #      - uses: actions/checkout@v2
  #        with:
  #          path: webiny-js
  #          ref: ${{ github.event.client_payload.branch }}
  #
  #      - uses: actions/cache@v2
  #        with:
  #          path: .webiny/cached-packages
  #          key: ${{ runner.os }}-${{ needs.cache-keys.outputs.ts }}
  #
  #      - name: Move .webiny to webiny-js/.webiny
  #        run: mv .webiny webiny-js/.webiny
  #
  #      - uses: actions/cache@v2
  #        with:
  #          path: .yarn/cache
  #          key: yarn-${{ runner.os }}-${{ hashFiles('webiny-js/**/yarn.lock') }}
  #
  #      - name: Move .yarn to webiny-js/.yarn
  #        run: mv .yarn webiny-js/.yarn
  #
  #      - name: Install dependencies
  #        working-directory: webiny-js
  #        run: yarn --immutable
  #
  #      - name: Build packages
  #        working-directory: webiny-js
  #        run: node scripts/buildWithCache.js
  #
  #      - name: Set up Cypress config
  #        working-directory: webiny-js
  #        run: yarn setup-cypress --project-folder ../test-project
  #
  #      - name: Cypress - run installation wizard test
  #        working-directory: webiny-js
  #        run: yarn cypress run --spec "cypress/integration/adminInstallation/**/*.spec.js"

  #      - name: Cypress - run the rest of Admin Area tests
  #        working-directory: webiny-js
  #        run: yarn cypress run --spec "cypress/integration/admin/**/*.spec.js"

  npm-release-latest:
    needs: [cache-keys, code-analysis, jest-tests, e2e-tests]
    name: NPM release ("latest" tag)
    runs-on: ubuntu-latest
    environment: release
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.branch }}
          fetch-depth: 0

      - uses: actions/cache@v2
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v2
        with:
          path: .webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.cache-keys.outputs.ts }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Build packages
        run: yarn build

      - name: Create ".npmrc" file in the project root
        run: echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc

      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"

      - name: Set git username
        run: git config --global user.name "webiny-bot"

      - name: Create a release on GitHub
        run: yarn lerna:version:latest

      - name: Release packages to NPM
        run: yarn lerna:publish:latest

      - name: Update package versions in the sample project applications' packages
        run: 'yarn webiny-versions && yarn prettier:fix && git add . && git commit --m "chore: update package versions (webiny-versions)" --no-verify && git push'

      - name: Update and commit "yarn.lock" file
        run: 'yarn && git add yarn.lock && git commit --m "chore: update yarn.lock" --no-verify && git push'
