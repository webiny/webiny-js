name: Experiments

on:
  push:
    branches: [poc/*, experiment/*, experiments/*]

env:
  NODE_OPTIONS: --max_old_space_size=4096
  BUILD_OVERRIDES: '{"tsConfig":{"compilerOptions":{"skipLibCheck":true}}}'

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    outputs:
      jest-packages: ${{ steps.list-jest-packages.outputs.jest-packages }}
      day: ${{ steps.get-day.outputs.day }}
      ts: ${{ steps.get-timestamp.outputs.ts }}
      experimental-version: ${{ steps.get-experimental-version.outputs.experimental-version }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - name: Get day of the month
        id: get-day
        run: echo "day=$(node --eval "console.log(new Date().getDate())")" >> $GITHUB_OUTPUT

      - name: Get timestamp
        id: get-timestamp
        run: echo "ts=$(node --eval "console.log(new Date().getTime())")" >> $GITHUB_OUTPUT

      - name: List packages with Jest tests
        id: list-jest-packages
        run: echo "jest-packages=$(node scripts/listPackagesWithTests.js)" >> $GITHUB_OUTPUT

      - name: Experimental version
        id: get-experimental-version
        run: echo "experimental-version=$(node --eval '"${{ github.event.head_commit.message }}".match(/release=/) && console.log("0.0.0-" + "${{ github.event.head_commit.message }}".match(/release=(.*)?]/)[1])')" >> $GITHUB_OUTPUT

      - name: Experimental version release
        if: ${{ steps.get-experimental-version.outputs.experimental-version }}
        id: is-experimental-version
        run: echo "The experimental ${{ steps.get-experimental-version.outputs.experimental-version }} version of Webiny will be released."

  build:
    name: Build
    needs: init
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v3
        id: global-daily-packages-cache
        with:
          path: .webiny/cached-packages
          key: ${{ runner.os }}-${{ needs.init.outputs.day }}-${{ secrets.RANDOM_CACHE_KEY_SUFFIX }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Build packages
        run: node scripts/buildWithCache.js --build-overrides='${{ env.BUILD_OVERRIDES }}'

      - uses: actions/cache@v3
        id: packages-cache
        with:
          path: .webiny/cached-packages
          key: packages-cache-${{ needs.init.outputs.ts }}

  code-analysis:
    name: Static code analysis
    needs: [init, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v3
        with:
          path: .webiny/cached-packages
          key: packages-cache-${{ needs.init.outputs.ts }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Check code formatting
        run: yarn prettier:check

      - name: Check dependencies
        run: yarn adio

      - name: Check TS configs
        run: yarn check-ts-configs

      - name: ESLint
        run: yarn eslint

  jest-tests:
    name: ${{ matrix.package }} (${{ matrix.os }}, Node v${{ matrix.node }})
    needs: [init, build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [14]
        package: ${{ fromJson(needs.init.outputs.jest-packages) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --immutable

      - uses: actions/cache@v3
        with:
          path: .webiny/cached-packages
          key: packages-cache-${{ needs.init.outputs.ts }}

      - name: Build packages
        run: node scripts/buildWithCache.js --build-overrides='${{ env.BUILD_OVERRIDES }}'

      - name: Run tests
        run: yarn test ${{ matrix.package }}

  code-analysis-typescript:
    name: Static code analysis (TypeScript)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Build packages (full)
        run: node scripts/buildWithCache.js

  npm-release-experimental:
    needs: [init, code-analysis, jest-tests, code-analysis-typescript]
    name: Release ${{ needs.init.outputs.experimental-version }}
    runs-on: ubuntu-latest
    if: needs.init.outputs.experimental-version
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - uses: actions/cache@v3
        with:
          path: .webiny/cached-packages
          key: packages-cache-${{ needs.init.outputs.ts }}

      - name: Install dependencies
        run: yarn --immutable

      - name: Build packages
        run: yarn build

      - name: Create ".npmrc" file in the project root
        run: echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc

      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"

      - name: Set git username
        run: git config --global user.name "webiny-bot"

      - name: Create a release (not pushing)
        run: yarn lerna:version:experimental ${{ needs.init.outputs.experimental-version }}

      - name: Release packages to NPM
        run: yarn lerna:publish:experimental
